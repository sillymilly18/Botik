package tguser

import (
	"log"

	"itmostar/internal/service/gpt"
	"itmostar/pkg/telegram_question"

	slerr "github.com/defany/slogger/pkg/err"
	"github.com/mymmrac/telego"
	"github.com/mymmrac/telego/telegohandler"
	"github.com/mymmrac/telego/telegoutil"
)

func (h *Handler) traffic(ctx *telegohandler.Context, message telego.Message) error {
	errText := "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞—Ñ–∏–∫–µ"
	builder := telegoutil.Message(message.Chat.ChatID(), errText)
	builder.WithParseMode(telego.ModeHTML)

	alarmText, err := h.service.FetchLastTrafficInfo(ctx)
	if err != nil {
		if err := h.sendMessage(ctx, builder); err != nil {
			return slerr.WithSource(err)
		}

		return slerr.WithSource(err)
	}

	builder.WithText(alarmText)

	if err := h.sendMessage(ctx, builder); err != nil {
		return slerr.WithSource(err)
	}

	builder.WithText("ü§ì –ü–æ–¥—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞ —á–µ—Ä–µ–∑ –ö—Ä—ã–º—Å–∫–∏–π –º–æ—Å—Ç?")

	yesNoKb := telegoutil.InlineKeyboard(
		telegoutil.InlineKeyboardRow(
			telegoutil.InlineKeyboardButton("–î–∞").WithCallbackData("yes"),
		),
		telegoutil.InlineKeyboardRow(
			telegoutil.InlineKeyboardButton("–ù–µ—Ç").WithCallbackData("no"),
		),
	)

	builder.WithReplyMarkup(yesNoKb)

	if err := h.sendMessage(ctx, builder); err != nil {
		return slerr.WithSource(err)
	}

	builder.WithReplyMarkup(nil)

	h.qm.Question(message.Chat.ID, message.From.ID, func(getter telegram_question.Getter) {
		ctx, recMessage := getter.Update()
		if recMessage.CallbackQuery == nil {
			getter.Next()

			return
		}

		userChoice := recMessage.CallbackQuery.Data
		if userChoice != "yes" {
			builder.WithText(`
–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º!
–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏:
–í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Ç—ã –º–æ–∂–µ—à—å –≤—Å–µ–≥–¥–∞ —É–∑–Ω–∞—Ç—å:
‚Äî üö¶ –¢–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫
‚Äî üö® –í–æ–∑–¥—É—à–Ω—É—é —Ç—Ä–µ–≤–æ–≥—É
‚Äî üìç –û—á–µ—Ä–µ–¥–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –º–æ—Å—Ç–∞
‚Äî üó∫ –ö–∞—Ä—Ç—É –∏ –¥–æ—Å–º–æ—Ç—Ä—ã

–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω–æ–µ –Ω–∏–∂–µ üëá
`)

			builder.WithReplyMarkup(nil)

			if err := h.sendMessage(ctx, builder); err != nil {
				return
			}

			return
		}

		builder.WithText("1Ô∏è‚É£ –û—Ç–∫—É–¥–∞ —Ç—ã –≤—ã–µ–∑–∂–∞–µ—à—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω–∞–ø–∞, –î–∂–∞–Ω–∫–æ–π, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä)")
		if err := h.sendMessage(ctx, builder); err != nil {
			return
		}

		ctx, recMessage = getter.Update()
		if recMessage.Message == nil {
			getter.Next()

			return
		}

		from := recMessage.Message.Text

		builder.WithText("2Ô∏è‚É£ –ö —Å–∫–æ–ª—å–∫–∏–º —á–∞—Å–∞–º —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –º–µ—Å—Ç–µ? (–ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú)")
		if err := h.sendMessage(ctx, builder); err != nil {
			return
		}

		ctx, recMessage = getter.Update()
		if recMessage.Message == nil {
			getter.Next()

			return
		}

		endRideAt := recMessage.Message.Text

		builder.WithText("–°–µ–∫—É–Ω–¥—É, —Å–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
		if err := h.sendMessage(ctx, builder); err != nil {
			return
		}

		outgoingMessage, err := h.service.FetchRideRecommendation(ctx, gpt.FetchRideRecommendationIn{
			From:      from,
			EndRideAt: endRideAt,
		})
		if err != nil {
			log.Println(err)

			return
		}

		builder.WithText(outgoingMessage)
		if err := h.sendMessage(ctx, builder); err != nil {
			return
		}
	})

	return nil
}
