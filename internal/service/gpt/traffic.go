package gpt

import (
	"context"
	"fmt"
	"sync"
	"time"

	"itmostar/internal/config"
	"itmostar/pkg/format"
	channelscrapper "itmostar/pkg/telegram_scrapper/channel"

	"github.com/bytedance/sonic"
	slerr "github.com/defany/slogger/pkg/err"
	"github.com/sashabaranov/go-openai"
)

type trafficPromptPlace struct {
	IsBusy bool `json:"is_busy"`
	Closed bool `json:"closed"`
	Cars   *int `json:"cars"`
	Wait   *int `json:"wait"`
}

type trafficPromptResult struct {
	Tamani  trafficPromptPlace `json:"tamani"`
	Kerch   trafficPromptPlace `json:"kerch"`
	Alert   bool               `json:"alert"`
	AddedAt time.Time          `json:"added_at"`
}

const trafficPrompt = `
–ü–∞—Ä—Å–∏ —Ç–µ–∫—Å—Ç –∏ –≤—ã–¥–∞–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É-JSON (–Ω–∏–∫–∞–∫–∏—Ö —Ç–µ–≥–æ–≤, –∫–æ–¥-–±–ª–æ–∫–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤).
–§–æ—Ä–º–∞—Ç:

{
‚Äútamani‚Äù: { ‚Äúis_busy‚Äù: true | false, "closed": true | false, "‚Äúcars‚Äù: N (–µ—Å–ª–∏ is_busy), ‚Äúwait‚Äù: N | null },
‚Äúkerch‚Äù: { ‚Äúis_busy‚Äù: true | false, "closed": true | false,  ‚Äúcars‚Äù: N (–µ—Å–ª–∏ is_busy), ‚Äúwait‚Äù: N | null },
‚Äúalert‚Äù: true | false,
‚Äúadded_at‚Äù: ‚ÄúYYYY-MM-DDTHH:MM:SS+03:00‚Äù
}

–ü—Ä–∞–≤–∏–ª–∞:
‚Ä¢ ¬´–∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏–π –Ω–µ—Ç¬ª ‚Üí is_busy=false, wait=null.
‚Ä¢ ¬´–¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ¬ª ‚Üí is_busy=false, wait=null, closed = true.
‚Ä¢ –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –æ—á–µ—Ä–µ–¥—å ‚Äî is_busy=true; –∑–∞–ø–æ–ª–Ω–∏ cars –∏ wait (–≤ wait —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ —á–∞—Å–æ–≤).
‚Ä¢ alert=false, –µ—Å–ª–∏ —è–≤–Ω–æ —Å–∫–∞–∑–∞–Ω–æ, —á—Ç–æ —Ç—Ä–µ–≤–æ–≥–∏ –Ω–µ—Ç; –∏–Ω–∞—á–µ true —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–µ.
‚Ä¢ added_at: –≤–æ–∑—å–º–∏ –¥–∞—Ç—É –º–æ–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è %s (UTC), –∑–∞–º–µ–Ω–∏ –≤ –Ω–µ–π —Ç–æ–ª—å–∫–æ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã –Ω–∞ –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å +03:00 –∏ –≤–µ—Ä–Ω–∏ –≤ RFC 3339 (Go time.Time).

–û—Ç–≤–µ—Ç ‚Äî —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ JSON.

–¢–µ–∫—Å—Ç:
%s
`

var (
	trafficCacheTTL = 5 * time.Minute
	trafficCache    struct {
		sync.RWMutex
		result  trafficPromptResult
		expires time.Time
	}
)

func (s *Service) FetchLastTrafficInfo(ctx context.Context) (string, error) {
	var result trafficPromptResult
	now := time.Now()

	trafficCache.RLock()
	if now.Before(trafficCache.expires) {
		result = trafficCache.result
		trafficCache.RUnlock()
	} else {
		trafficCache.RUnlock()

		post, _, err := channelscrapper.FetchLastPost(ctx, config.GeneralInfoChannel())
		if err != nil {
			return "", slerr.WithSource(err)
		}

		req := openai.ChatCompletionRequest{
			Model: openai.GPT4o,
			Messages: []openai.ChatCompletionMessage{
				{
					Role:    openai.ChatMessageRoleDeveloper,
					Content: fmt.Sprintf(trafficPrompt, time.Now().UTC().String(), post),
				},
			},
			Store: false,
		}

		resp, err := s.gpt.CreateChatCompletion(ctx, req)
		if err != nil {
			return "", slerr.WithSource(err)
		}

		if err := sonic.UnmarshalString(resp.Choices[0].Message.Content, &result); err != nil {
			return "", slerr.WithSource(err)
		}

		trafficCache.Lock()
		trafficCache.result = result
		trafficCache.expires = now.Add(trafficCacheTTL)
		trafficCache.Unlock()
	}

	infoMaker := func(place string, in trafficPromptPlace) string {
		if in.Closed {
			return fmt.Sprintf("üìç –í—ä–µ–∑–¥ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã %s: –∑–∞–∫—Ä—ã—Ç", place)
		}

		if !in.IsBusy {
			return fmt.Sprintf("üìç –í—ä–µ–∑–¥ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã %s: —Å–≤–æ–±–æ–¥–Ω–æ", place)
		}

		var approxTime string
		if wait := in.Wait; wait != nil {
			approxTime = fmt.Sprintf(", ~%d %s –æ–∂–∏–¥–∞–Ω–∏—è", *wait, format.Declension(*wait, "—á–∞—Å", "—á–∞—Å–∞", "—á–∞—Å–æ–≤"))
		}

		var carsText string
		if cars := in.Cars; cars != nil {
			carsText = fmt.Sprintf("%d –∞–≤—Ç–æ", *cars)
		}

		return fmt.Sprintf("üìç –í—ä–µ–∑–¥ —Å %s: %s%s", place, carsText, approxTime)
	}

	kerchInfo := infoMaker("–ö–µ—Ä—á–∏", result.Kerch)
	tamaniInfo := infoMaker("–¢–∞–º–∞–Ω–∏", result.Tamani)

	alarmText, err := s.FetchLastAlarmInfo(ctx)
	if err != nil {
		return "", slerr.WithSource(err)
	}

	finalText := `
üü† –ö—Ä—ã–º—Å–∫–∏–π –º–æ—Å—Ç —Å–µ–π—á–∞—Å:

%s
%s

üö® –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∫–µ—Ç–Ω–æ–π –æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
<blockquote expandable>
%s
</blockquote>
`
	finalText = fmt.Sprintf(finalText, kerchInfo, tamaniInfo, alarmText)

	return finalText, nil
}
