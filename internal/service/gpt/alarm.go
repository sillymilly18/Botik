package gpt

import (
	"context"
	"fmt"
	"sync"
	"time"

	"itmostar/internal/config"
	channelscrapper "itmostar/pkg/telegram_scrapper/channel"

	slerr "github.com/defany/slogger/pkg/err"
	"github.com/sashabaranov/go-openai"
)

var (
	alarmInfoCacheTTL = 5 * time.Minute
	alarmCache        struct {
		sync.RWMutex
		text    string
		expires time.Time
	}
)

const alarmPrompt = `
NOW: %s
POST_CREATED_AT: %s
MESSAGE_TO_PARSE: %s

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π MESSAGE_TO_PARSE –∏ –≤–µ—Ä–Ω–∏ –æ–¥–Ω–æ-–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ìO–¢–û–í–û–ï –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
(plain text; parse_mode –Ω–µ –≤–∞–∂–µ–Ω). –ò—Å–ø–æ–ª—å–∑—É–π –†–ï–ê–õ–¨–ù–´–ï –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫–∏ (ASCII 10) ‚Äï –Ω–∏–∫–∞–∫–∏—Ö "\n", \code-block\
–∏–ª–∏ –∫–∞–≤—ã—á–µ–∫ –≤–æ–∫—Ä—É–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

–§–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ —Ç—Ä–µ–≤–æ–≥–∞ –û–ë–™–Ø–í–õ–ï–ù–ê:
üö® –†–∞–∫–µ—Ç–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞ (–æ–±—ä—è–≤–ª–µ–Ω–∞)

üìç –†–∞–π–æ–Ω—ã: {—Ä–∞–π–æ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é}
‚è±Ô∏è –í—Ä–µ–º—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {POST_CREATED_AT –≤ MSK, HH:MM}

üîî –ò—Å—Ç–æ—á–Ω–∏–∫: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚ÄºÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:
‚Äì –û—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –æ–∫–Ω–∞–º–∏
‚Äì –ù–µ –ø–æ–∫–∏–¥–∞—Ç—å –∑–æ–Ω—É —Å—Ç–æ—è–Ω–∫–∏ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
‚Äì –°–ª–µ–¥–∏—Ç—å –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏

üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {NOW –≤ MSK +03:00, HH:MM}

–§–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ —Ç—Ä–µ–≤–æ–≥–∞ –û–¢–ú–ï–ù–ï–ù–ê –∏–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –≤ –Ω–µ–π –Ω–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ (–≤—ã–±–µ—Ä–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç –ª–∏–±–æ –ø–µ—Ä–µ–¥ –ª–∏–±–æ –ø–æ—Å–ª–µ —Å–ª–µ—à–∞):
üü¢ –†–∞–∫–µ—Ç–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞/–†–∞–∫–µ—Ç–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–∏ –Ω–µ—Ç 

üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {NOW –≤ MSK +03:00, HH:MM}

–ü—Ä–∞–≤–∏–ª–∞:
1. ¬´–í—Ä–µ–º—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è¬ª –±–µ—Ä–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞; –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π NOW, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–≤ –≤ MSK (+03:00) –∏ –æ—Å—Ç–∞–≤–∏–≤ HH:MM.
2. –†–∞–π–æ–Ω—ã/–≥–æ—Ä–æ–¥–∞ –ø–µ—Ä–µ—á–∏—Å–ª—è–π —É–Ω–∏–∫–∞–ª—å–Ω–æ –≤ –ø–æ—Ä—è–¥–∫–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è.
3. –î–æ–±–∞–≤–ª—è–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ —è–≤–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
4. –ò—Ç–æ–≥ ‚Äî –æ–¥–Ω–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤–æ–∫—Ä—É–≥.
`

func (s *Service) FetchLastAlarmInfo(ctx context.Context) (string, error) {
	alarmCache.RLock()

	if time.Now().Before(alarmCache.expires) && alarmCache.text != "" {
		t := alarmCache.text
		alarmCache.RUnlock()
		return t, nil
	}

	alarmCache.RUnlock()

	post, postCreatedAt, err := channelscrapper.FetchLastPost(ctx, config.AlarmsInfoChannel())
	if err != nil {
		return "", slerr.WithSource(err)
	}

	req := openai.ChatCompletionRequest{
		Model: openai.GPT4o,
		Messages: []openai.ChatCompletionMessage{
			{
				Role: openai.ChatMessageRoleDeveloper,
				Content: fmt.Sprintf(
					alarmPrompt,
					time.Now().UTC().String(),
					postCreatedAt.UTC().String(),
					post,
				),
			},
		},
		Store: false,
	}

	resp, err := s.gpt.CreateChatCompletion(ctx, req)
	if err != nil {
		return "", slerr.WithSource(err)
	}

	alarmText := resp.Choices[0].Message.Content

	alarmCache.Lock()
	alarmCache.text = alarmText
	alarmCache.expires = time.Now().Add(alarmInfoCacheTTL)
	alarmCache.Unlock()

	return alarmText, nil
}
