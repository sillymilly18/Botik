package gpt

import (
	"context"
	"fmt"
	"strings"
	"time"

	"itmostar/internal/config"
	channelscrapper "itmostar/pkg/telegram_scrapper/channel"

	slerr "github.com/defany/slogger/pkg/err"
	"github.com/sashabaranov/go-openai"
)

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ "HH:MM" –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –ö—Ä—ã–º—Å–∫–æ–≥–æ –º–æ—Å—Ç–∞ (UTC+3).
// –î–µ–Ω—å/–º–µ—Å—è—Ü/–≥–æ–¥ –±–µ—Ä—ë–º –∏–∑ NOW (UTC) -> –∫–æ–Ω–≤–µ—Ä—Ç–∏–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ UTC+3 -> –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º.
// GPT —Å–∞–º –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–µ—Å—Ç–∞ –≤—ã–µ–∑–¥–∞.

// -----------------------------------------------------------------------------
// System prompt: –∂—ë—Å—Ç–∫–∏–π, –∫–æ—Ä–æ—Ç–∫–∏–π, –±–µ–∑ –≤–æ–¥—ã.
// -----------------------------------------------------------------------------
const rideSystemPrompt = `–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞—Å—á—ë—Ç–∞ –≤—ã–µ–∑–¥–∞ –∫ –ö—Ä—ã–º—Å–∫–æ–º—É –º–æ—Å—Ç—É.
–ó–∞–¥–∞—á–∞: –∫—Ä–∞—Ç–∫–æ —Å–∫–∞–∑–∞—Ç—å –¥–æ —Å–∫–æ–ª—å–∫–∏ –≤—ã–µ—Ö–∞—Ç—å, –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç—å –ø–∏–∫–æ–≤—É—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å.
–°–∞–º –æ—Ü–µ–Ω–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ –ø–æ –º–µ—Å—Ç—É –≤—ã–µ–∑–¥–∞ (–≥—Ä—É–±–æ, –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ). –ï—Å–ª–∏ –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö ‚Äî –∑–∞–∫–ª–∞–¥—ã–≤–∞–π –∑–∞–ø–∞—Å.
–ï—Å–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ / –∑–∞–∫—Ä—ã—Ç–∏–µ / –æ—Å—Ç–∞–Ω–æ–≤–∫—É –¥–≤–∏–∂–µ–Ω–∏—è / —ç–≤–∞–∫—É–∞—Ü–∏—é / –æ–ø–∞—Å–Ω–æ—Å—Ç—å, —Ç–æ –≤ –±–ª–æ–∫–µ "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è" –ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ: "–î–≤–∏–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç–∏—è" (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å "—Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏").
–ù–ï —Å–æ–≤–µ—Ç—É–π –≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏.
"–í—ã–µ—Ö–∞—Ç—å —É–∂–µ –ø–æ–∑–¥–Ω–æ" ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —è–≤–Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏ (—É—á–∏—Ç—ã–≤–∞—è –∑–∞–ø–∞—Å ~30 –º–∏–Ω) –∏ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ.
–í–°–ï–ì–î–ê –≤—ã–≤–æ–¥–∏ –≤—Å–µ —Ç—Ä–∏ –±–ª–æ–∫–∞ –æ—Ç–≤–µ—Ç–∞ (–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è, –°–µ–π—á–∞—Å –≤ –æ—á–µ—Ä–µ–¥–∏, –ü–∏–∫–æ–≤–∞—è), –¥–∞–∂–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏.
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown, –∫–∞–≤—ã—á–∫–∏, code block, –ø–æ—è—Å–Ω–µ–Ω–∏—è. –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –∑–∞–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.`

// -----------------------------------------------------------------------------
// User prompt template. –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ fmt.Sprintf.
// -----------------------------------------------------------------------------
const rideUserPromptTmpl = `
–î–ê–ù–ù–´–ï
------
–°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –æ —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞ –º–æ—Å—Ç—É:
%s

–°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –æ —Ä–∞–∫–µ—Ç–Ω–æ–π / –ë–ü–õ–ê –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ:
%s

–ú–µ—Å—Ç–æ –≤—ã–µ–∑–¥–∞: %s

–¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è (–ª–æ–∫–∞–ª—å–Ω–æ —É –º–æ—Å—Ç–∞, UTC+3): %s
–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ —Ü–µ–ª–µ–≤–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–¥–∞—Ç–∞+–≤—Ä–µ–º—è): %s

–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (UTC): %s
–¢–µ–∫—É—â–µ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É –º–æ—Å—Ç–∞ (UTC+3): %s

–î–æ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å: %d –º–∏–Ω—É—Ç (~%s)

–ò–ù–°–¢–†–£–ö–¶–ò–Ø
----------
1. –û—Ü–µ–Ω–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ –Ω–∞ –∞–≤—Ç–æ –æ—Ç –º–µ—Å—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ –ö—Ä—ã–º—Å–∫–æ–≥–æ –º–æ—Å—Ç–∞ (–≥—Ä—É–±–æ; –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å ‚Äî –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ; –º–æ–∂–Ω–æ —É–ø–æ–º—è–Ω—É—Ç—å "–ø—Ä–∏–º–µ—Ä–Ω–æ").
2. –ï—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ/–ø–µ—Ä–µ–∫—Ä—ã—Ç–æ/–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚Äî –≤ –±–ª–æ–∫–µ "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è" —Å–∫–∞–∂–∏, —á—Ç–æ –¥–≤–∏–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–æ –∏ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏—è (–ø–æ–¥–æ–∂–¥–∏—Ç–µ, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏). –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π –≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞.
3. –ï—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ: —Å—Ä–∞–≤–Ω–∏ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Å –æ—Ü–µ–Ω–∫–æ–π –ø—É—Ç–∏ (+~30 –º–∏–Ω –±—É—Ñ–µ—Ä). –ï—Å–ª–∏ —É—Å–ø–µ–≤–∞–µ—Ç ‚Äî –¥–∞–π "–í—ã–µ—Ö–∞—Ç—å –Ω–µ –ø–æ–∑–¥–Ω–µ–µ HH:MM". –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî "–í—ã–µ—Ö–∞—Ç—å —É–∂–µ –ø–æ–∑–¥–Ω–æ".
4. –ò–∑ —Ç–µ–∫—Å—Ç–∞ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤—ã—Ç—è–Ω–∏ –ø–æ –ö–µ—Ä—á–∏ –∏ –¢–∞–º–∞–Ω–∏: –æ—á–µ—Ä–µ–¥—å (—Å–≤–æ–±–æ–¥–Ω–æ / N –∞–≤—Ç–æ), –æ–∂–∏–¥–∞–Ω–∏–µ (–≤ —á–∞—Å–∞—Ö), –ª–∏–±–æ "–¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ".
5. –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏ –ø–∏–∫–æ–≤—É—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å (—Ç–∏–ø–∏—á–Ω–æ: –Ω–æ—á–∏ –ª–µ–≥—á–µ, —É—Ç—Ä–æ/–≤–µ—á–µ—Ä –ø–ª–æ—Ç–Ω–µ–µ) –∏–ª–∏ "–î–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ".
6. –ù–ï –≤—ã–≤–æ–¥–∏ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ –∏ –ù–ï –≤—ã–≤–æ–¥–∏ –¥–∞—Ç—ã –≤ –æ—Ç–≤–µ—Ç–µ. –¢–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∞ HH:MM.
7. –ù–ï –≤—ã–≤–æ–¥–∏ –≤—Ä–µ–º—è <= —Ç–µ–∫—É—â–µ–º—É –ª–æ–∫–∞–ª—å–Ω–æ–º—É. –ï—Å–ª–∏ —Ä–∞—Å—á—ë—Ç –¥–∞–ª –ø—Ä–æ—à–ª–æ–µ ‚Äî "–í—ã–µ—Ö–∞—Ç—å —É–∂–µ –ø–æ–∑–¥–Ω–æ" (–µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ) –ª–∏–±–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∂–¥–∞—Ç—å (–µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç–æ).

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (–°–¢–†–û–ì–û)
----------------------
‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
<–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞: –Ω–∞–ø—Ä. –í—ã–µ—Ö–∞—Ç—å –Ω–µ –ø–æ–∑–¥–Ω–µ–µ 02:30, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–µ–π –∏ —É—Å–ø–µ—Ç—å. / –í—ã–µ—Ö–∞—Ç—å —É–∂–µ –ø–æ–∑–¥–Ω–æ... / –î–≤–∏–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç–∏—è.>

üö¶ –°–µ–π—á–∞—Å –≤ –æ—á–µ—Ä–µ–¥–∏
üìç –°–æ —Å—Ç–æ—Ä–æ–Ω—ã –ö–µ—Ä—á–∏: <—Å–≤–æ–±–æ–¥–Ω–æ / N –∞–≤—Ç–æ, ~M —á / –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ>
üìç –°–æ —Å—Ç–æ—Ä–æ–Ω—ã –¢–∞–º–∞–Ω–∏: <... –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ>

üïí –ü–∏–∫–æ–≤–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å
<–¥–∏–∞–ø–∞–∑–æ–Ω –∏–ª–∏ "–î–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ">

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –í–´–í–û–î–ê
-----------------
–¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–π –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç (ASCII –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫–∏). –ë–µ–∑ markdown, –±—ç–∫—Ç–∏–∫–æ–≤, –∫–∞–≤—ã—á–µ–∫, —Ä–∞–∑–º–µ—Ç–∫–∏, –∫–æ–¥-–±–ª–æ–∫–æ–≤ –∏–ª–∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π.`

// -----------------------------------------------------------------------------
// –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∏–∑–Ω–µ—Å-—Å–ª–æ—è.
// -----------------------------------------------------------------------------
type FetchRideRecommendationIn struct {
	From      string // –º–µ—Å—Ç–æ –≤—ã–µ–∑–¥–∞
	EndRideAt string // "HH:MM" –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (UTC+3)
}

// -----------------------------------------------------------------------------
// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –≥–æ—Ç–æ–≤–∏—Ç –ø—Ä–æ–º–ø—Ç, –≤—ã–∑—ã–≤–∞–µ—Ç –º–æ–¥–µ–ª—å.
// -----------------------------------------------------------------------------
func (s *Service) FetchRideRecommendation(ctx context.Context, in FetchRideRecommendationIn) (string, error) {
	// 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã —Å –∫–∞–Ω–∞–ª–æ–≤.
	trafficRaw, _, err := channelscrapper.FetchLastPost(ctx, config.GeneralInfoChannel())
	if err != nil {
		return "", slerr.WithSource(err)
	}
	alarmRaw, _, err := channelscrapper.FetchLastPost(ctx, config.AlarmsInfoChannel())
	if err != nil {
		return "", slerr.WithSource(err)
	}

	trafficText := sanitizePost(trafficRaw, 2000, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞ –º–æ—Å—Ç—É.")
	alarmText := sanitizePost(alarmRaw, 2000, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–∞–∫–µ—Ç–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ.")

	nowUTC := time.Now().UTC()
	nowUTCStr := nowUTC.Format("2006-01-02 15:04:05")

	bridgeLoc := time.FixedZone("CRIMEA", 3*3600)
	nowLocal := nowUTC.In(bridgeLoc)
	nowLocalStr := nowLocal.Format("2006-01-02 15:04:05")

	targetLocal, parsed := combineLocalDateTime(nowLocal, in.EndRideAt)
	targetLocalStr := "–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
	minsUntil := int64(-1)
	humanUntil := "–Ω/–¥"
	if parsed {
		targetLocalStr = targetLocal.Format("2006-01-02 15:04:05")
		diff := targetLocal.Sub(nowLocal)
		minsUntil = diff.Milliseconds() / 1000 / 60
		humanUntil = humanizeDiff(diff)
	}

	userPrompt := fmt.Sprintf(
		rideUserPromptTmpl,
		trafficText,
		alarmText,
		strings.TrimSpace(in.From),
		strings.TrimSpace(in.EndRideAt),
		targetLocalStr,
		nowUTCStr,
		nowLocalStr,
		minsUntil,
		humanUntil,
	)

	msgs := []openai.ChatCompletionMessage{
		{
			Role:    openai.ChatMessageRoleSystem,
			Content: rideSystemPrompt,
		},
		{
			Role:    openai.ChatMessageRoleUser,
			Content: userPrompt,
		},
	}

	req := openai.ChatCompletionRequest{
		Model:       openai.GPT4o,
		Messages:    msgs,
		Temperature: 0.1,
		Store:       false,
	}

	resp, err := s.gpt.CreateChatCompletion(ctx, req)
	if err != nil {
		return "", slerr.WithSource(err)
	}
	if len(resp.Choices) == 0 {
		return "", slerr.WithSource(fmt.Errorf("empty chat completion response"))
	}

	out := strings.TrimSpace(resp.Choices[0].Message.Content)
	if out == "" {
		return "", slerr.WithSource(fmt.Errorf("empty chat completion message content"))
	}

	return out, nil
}

func sanitizePost(s string, maxRunes int, fallback string) string {
	s = strings.TrimSpace(s)
	if s == "" {
		return fallback
	}
	s = strings.ReplaceAll(s, "\r\n", "\n")
	s = strings.ReplaceAll(s, "\r", "\n")
	rs := []rune(s)
	if maxRunes > 0 && len(rs) > maxRunes {
		s = string(rs[:maxRunes]) + "‚Ä¶"
	}
	return s
}

// combineLocalDateTime: –±–µ—Ä—ë–º –¥–∞—Ç—É –∏–∑ base (–ª–æ–∫–∞–ª—å–Ω–æ–µ UTC+3 nowLocal) + —Å—Ç—Ä–æ–∫—É "HH:MM".
func combineLocalDateTime(base time.Time, hhmm string) (time.Time, bool) {
	hhmm = strings.TrimSpace(hhmm)
	if hhmm == "" {
		return base, false
	}

	if !strings.Contains(hhmm, ":") {
		hhmm += ":00"
	}

	t, err := time.ParseInLocation("15:04", hhmm, base.Location())
	if err != nil {
		return base, false
	}

	target := time.Date(base.Year(), base.Month(), base.Day(), t.Hour(), t.Minute(), 0, 0, base.Location())

	return target, true
}

func humanizeDiff(d time.Duration) string {
	mins := int64(d / time.Minute)
	if mins == 0 {
		return "0–º"
	}
	sign := ""
	if mins < 0 {
		sign = "-"
		mins = -mins
	}
	h := mins / 60
	m := mins % 60
	if h > 0 {
		return fmt.Sprintf("%s%d—á%02d–º", sign, h, m)
	}
	return fmt.Sprintf("%s%dm", sign, m)
}
